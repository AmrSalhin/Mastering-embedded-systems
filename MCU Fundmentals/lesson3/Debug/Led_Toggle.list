
Led_Toggle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000208  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000314  08000314  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000314  08000314  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000314  08000314  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000314  08000314  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000314  08000314  00010314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000318  08000318  00010318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800031c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000320  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000320  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c89  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000451  00000000  00000000  00020cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001b0  00000000  00000000  00021108  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000168  00000000  00000000  000212b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000f5a  00000000  00000000  00021420  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001634  00000000  00000000  0002237a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078c20  00000000  00000000  000239ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009c5ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004f0  00000000  00000000  0009c64c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080002fc 	.word	0x080002fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080002fc 	.word	0x080002fc

0800014c <main>:
#define GPIOA_CRH 		*(vuint32 *)(PORTA_BASE + 0x04)
#define GPIOA_ODR 		*(vuint32 *)(PORTA_BASE + 0x0C)
#define RCC_CFGR     	*(vuint32 *)(RCC_BASE + 0x04)


void main(void){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
//	0xx: HCLK not divided
//	100: HCLK divided by 2
//	101: HCLK divided by 4
//	110: HCLK divided by 8
//	111: HCLK divided by 16
	RCC_CFGR|=(0b100<<8);
 8000152:	4b20      	ldr	r3, [pc, #128]	; (80001d4 <main+0x88>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	4a1f      	ldr	r2, [pc, #124]	; (80001d4 <main+0x88>)
 8000158:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800015c:	6013      	str	r3, [r2, #0]
//	0xx: HCLK not divided
//	100: HCLK divided by 2
//	101: HCLK divided by 4
//	110: HCLK divided by 8
//	111: HCLK divided by 16
	RCC_CFGR|=(0b101<<11);
 800015e:	4b1d      	ldr	r3, [pc, #116]	; (80001d4 <main+0x88>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	4a1c      	ldr	r2, [pc, #112]	; (80001d4 <main+0x88>)
 8000164:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8000168:	6013      	str	r3, [r2, #0]

	RCC_APB2ENR |= 1<<2;
 800016a:	4b1b      	ldr	r3, [pc, #108]	; (80001d8 <main+0x8c>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	4a1a      	ldr	r2, [pc, #104]	; (80001d8 <main+0x8c>)
 8000170:	f043 0304 	orr.w	r3, r3, #4
 8000174:	6013      	str	r3, [r2, #0]
	GPIOA_CRH &= 0xff0fffff;
 8000176:	4b19      	ldr	r3, [pc, #100]	; (80001dc <main+0x90>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	4a18      	ldr	r2, [pc, #96]	; (80001dc <main+0x90>)
 800017c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000180:	6013      	str	r3, [r2, #0]
	GPIOA_CRH |= 0x00200000;
 8000182:	4b16      	ldr	r3, [pc, #88]	; (80001dc <main+0x90>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4a15      	ldr	r2, [pc, #84]	; (80001dc <main+0x90>)
 8000188:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800018c:	6013      	str	r3, [r2, #0]

	while(1){
		GPIOA_ODR |= 1<<13;
 800018e:	4b14      	ldr	r3, [pc, #80]	; (80001e0 <main+0x94>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4a13      	ldr	r2, [pc, #76]	; (80001e0 <main+0x94>)
 8000194:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000198:	6013      	str	r3, [r2, #0]
		for(int i=0;i<5000;i++);
 800019a:	2300      	movs	r3, #0
 800019c:	607b      	str	r3, [r7, #4]
 800019e:	e002      	b.n	80001a6 <main+0x5a>
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	3301      	adds	r3, #1
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f241 3287 	movw	r2, #4999	; 0x1387
 80001ac:	4293      	cmp	r3, r2
 80001ae:	ddf7      	ble.n	80001a0 <main+0x54>
		GPIOA_ODR &=~(1<<13);
 80001b0:	4b0b      	ldr	r3, [pc, #44]	; (80001e0 <main+0x94>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a0a      	ldr	r2, [pc, #40]	; (80001e0 <main+0x94>)
 80001b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80001ba:	6013      	str	r3, [r2, #0]
		for(int i=0;i<5000;i++);
 80001bc:	2300      	movs	r3, #0
 80001be:	603b      	str	r3, [r7, #0]
 80001c0:	e002      	b.n	80001c8 <main+0x7c>
 80001c2:	683b      	ldr	r3, [r7, #0]
 80001c4:	3301      	adds	r3, #1
 80001c6:	603b      	str	r3, [r7, #0]
 80001c8:	683b      	ldr	r3, [r7, #0]
 80001ca:	f241 3287 	movw	r2, #4999	; 0x1387
 80001ce:	4293      	cmp	r3, r2
 80001d0:	ddf7      	ble.n	80001c2 <main+0x76>
		GPIOA_ODR |= 1<<13;
 80001d2:	e7dc      	b.n	800018e <main+0x42>
 80001d4:	40021004 	.word	0x40021004
 80001d8:	40021018 	.word	0x40021018
 80001dc:	40010804 	.word	0x40010804
 80001e0:	4001080c 	.word	0x4001080c

080001e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80001e4:	b480      	push	{r7}
 80001e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80001e8:	bf00      	nop
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bc80      	pop	{r7}
 80001ee:	4770      	bx	lr

080001f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80001f0:	b480      	push	{r7}
 80001f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80001f4:	e7fe      	b.n	80001f4 <HardFault_Handler+0x4>

080001f6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80001f6:	b480      	push	{r7}
 80001f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80001fa:	e7fe      	b.n	80001fa <MemManage_Handler+0x4>

080001fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000200:	e7fe      	b.n	8000200 <BusFault_Handler+0x4>

08000202 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000202:	b480      	push	{r7}
 8000204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000206:	e7fe      	b.n	8000206 <UsageFault_Handler+0x4>

08000208 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800020c:	bf00      	nop
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr

08000214 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000218:	bf00      	nop
 800021a:	46bd      	mov	sp, r7
 800021c:	bc80      	pop	{r7}
 800021e:	4770      	bx	lr

08000220 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr

0800022c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000230:	f000 f82e 	bl	8000290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000234:	bf00      	nop
 8000236:	bd80      	pop	{r7, pc}

08000238 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800023c:	bf00      	nop
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr

08000244 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000244:	480c      	ldr	r0, [pc, #48]	; (8000278 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000246:	490d      	ldr	r1, [pc, #52]	; (800027c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000248:	4a0d      	ldr	r2, [pc, #52]	; (8000280 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800024a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800024c:	e002      	b.n	8000254 <LoopCopyDataInit>

0800024e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800024e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000252:	3304      	adds	r3, #4

08000254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000258:	d3f9      	bcc.n	800024e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800025a:	4a0a      	ldr	r2, [pc, #40]	; (8000284 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800025c:	4c0a      	ldr	r4, [pc, #40]	; (8000288 <LoopFillZerobss+0x22>)
  movs r3, #0
 800025e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000260:	e001      	b.n	8000266 <LoopFillZerobss>

08000262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000264:	3204      	adds	r2, #4

08000266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000268:	d3fb      	bcc.n	8000262 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800026a:	f7ff ffe5 	bl	8000238 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800026e:	f000 f821 	bl	80002b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000272:	f7ff ff6b 	bl	800014c <main>
  bx lr
 8000276:	4770      	bx	lr
  ldr r0, =_sdata
 8000278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800027c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000280:	0800031c 	.word	0x0800031c
  ldr r2, =_sbss
 8000284:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000288:	20000024 	.word	0x20000024

0800028c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800028c:	e7fe      	b.n	800028c <ADC1_2_IRQHandler>
	...

08000290 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000294:	4b05      	ldr	r3, [pc, #20]	; (80002ac <HAL_IncTick+0x1c>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	461a      	mov	r2, r3
 800029a:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <HAL_IncTick+0x20>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4413      	add	r3, r2
 80002a0:	4a03      	ldr	r2, [pc, #12]	; (80002b0 <HAL_IncTick+0x20>)
 80002a2:	6013      	str	r3, [r2, #0]
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr
 80002ac:	20000000 	.word	0x20000000
 80002b0:	20000020 	.word	0x20000020

080002b4 <__libc_init_array>:
 80002b4:	b570      	push	{r4, r5, r6, lr}
 80002b6:	2500      	movs	r5, #0
 80002b8:	4e0c      	ldr	r6, [pc, #48]	; (80002ec <__libc_init_array+0x38>)
 80002ba:	4c0d      	ldr	r4, [pc, #52]	; (80002f0 <__libc_init_array+0x3c>)
 80002bc:	1ba4      	subs	r4, r4, r6
 80002be:	10a4      	asrs	r4, r4, #2
 80002c0:	42a5      	cmp	r5, r4
 80002c2:	d109      	bne.n	80002d8 <__libc_init_array+0x24>
 80002c4:	f000 f81a 	bl	80002fc <_init>
 80002c8:	2500      	movs	r5, #0
 80002ca:	4e0a      	ldr	r6, [pc, #40]	; (80002f4 <__libc_init_array+0x40>)
 80002cc:	4c0a      	ldr	r4, [pc, #40]	; (80002f8 <__libc_init_array+0x44>)
 80002ce:	1ba4      	subs	r4, r4, r6
 80002d0:	10a4      	asrs	r4, r4, #2
 80002d2:	42a5      	cmp	r5, r4
 80002d4:	d105      	bne.n	80002e2 <__libc_init_array+0x2e>
 80002d6:	bd70      	pop	{r4, r5, r6, pc}
 80002d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002dc:	4798      	blx	r3
 80002de:	3501      	adds	r5, #1
 80002e0:	e7ee      	b.n	80002c0 <__libc_init_array+0xc>
 80002e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002e6:	4798      	blx	r3
 80002e8:	3501      	adds	r5, #1
 80002ea:	e7f2      	b.n	80002d2 <__libc_init_array+0x1e>
 80002ec:	08000314 	.word	0x08000314
 80002f0:	08000314 	.word	0x08000314
 80002f4:	08000314 	.word	0x08000314
 80002f8:	08000318 	.word	0x08000318

080002fc <_init>:
 80002fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fe:	bf00      	nop
 8000300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000302:	bc08      	pop	{r3}
 8000304:	469e      	mov	lr, r3
 8000306:	4770      	bx	lr

08000308 <_fini>:
 8000308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030a:	bf00      	nop
 800030c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800030e:	bc08      	pop	{r3}
 8000310:	469e      	mov	lr, r3
 8000312:	4770      	bx	lr
