
Led_Toggle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000024c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000358  08000358  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000358  08000358  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000358  08000358  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000358  08000358  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000358  08000358  00010358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800035c  0800035c  0001035c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000360  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000364  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000364  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c80  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000437  00000000  00000000  00020cad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001c8  00000000  00000000  000210e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000180  00000000  00000000  000212b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000f8a  00000000  00000000  00021430  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001650  00000000  00000000  000223ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078d61  00000000  00000000  00023a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009c76b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000550  00000000  00000000  0009c7e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000340 	.word	0x08000340

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000340 	.word	0x08000340

0800014c <Clk_init>:
#define AFIO_EXTICR1	*(vuint32 *)(AFIO_BASE + 0x08)

//NVIC registers
#define NVIC_EXTIE0		*(vuint32 *)(0xE000E100)

void Clk_init(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	//Enable Clock for used peripherals
	RCC_APB2ENR |= (1<<2);
 8000150:	4b07      	ldr	r3, [pc, #28]	; (8000170 <Clk_init+0x24>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a06      	ldr	r2, [pc, #24]	; (8000170 <Clk_init+0x24>)
 8000156:	f043 0304 	orr.w	r3, r3, #4
 800015a:	6013      	str	r3, [r2, #0]
	RCC_APB2ENR |= (1<<0);
 800015c:	4b04      	ldr	r3, [pc, #16]	; (8000170 <Clk_init+0x24>)
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	4a03      	ldr	r2, [pc, #12]	; (8000170 <Clk_init+0x24>)
 8000162:	f043 0301 	orr.w	r3, r3, #1
 8000166:	6013      	str	r3, [r2, #0]
}
 8000168:	bf00      	nop
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr
 8000170:	40021018 	.word	0x40021018

08000174 <GPIO_init>:

void GPIO_init(){
 8000174:	b480      	push	{r7}
 8000176:	af00      	add	r7, sp, #0
	GPIOA_CRH &= 0xff0fffff;
 8000178:	4b0a      	ldr	r3, [pc, #40]	; (80001a4 <GPIO_init+0x30>)
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	4a09      	ldr	r2, [pc, #36]	; (80001a4 <GPIO_init+0x30>)
 800017e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000182:	6013      	str	r3, [r2, #0]
	GPIOA_CRH |= 0x00200000;
 8000184:	4b07      	ldr	r3, [pc, #28]	; (80001a4 <GPIO_init+0x30>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	4a06      	ldr	r2, [pc, #24]	; (80001a4 <GPIO_init+0x30>)
 800018a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800018e:	6013      	str	r3, [r2, #0]
	GPIOA_CRL |= (1<<2);
 8000190:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <GPIO_init+0x34>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4a04      	ldr	r2, [pc, #16]	; (80001a8 <GPIO_init+0x34>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6013      	str	r3, [r2, #0]
}
 800019c:	bf00      	nop
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	40010804 	.word	0x40010804
 80001a8:	40010800 	.word	0x40010800

080001ac <main>:

void main(void){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0

	Clk_init();
 80001b0:	f7ff ffcc 	bl	800014c <Clk_init>
	GPIO_init();
 80001b4:	f7ff ffde 	bl	8000174 <GPIO_init>
	EXTI_IMR |= (1<<0);
 80001b8:	4b0c      	ldr	r3, [pc, #48]	; (80001ec <main+0x40>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	4a0b      	ldr	r2, [pc, #44]	; (80001ec <main+0x40>)
 80001be:	f043 0301 	orr.w	r3, r3, #1
 80001c2:	6013      	str	r3, [r2, #0]

	EXTI_RTSR |= (1<<0);
 80001c4:	4b0a      	ldr	r3, [pc, #40]	; (80001f0 <main+0x44>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a09      	ldr	r2, [pc, #36]	; (80001f0 <main+0x44>)
 80001ca:	f043 0301 	orr.w	r3, r3, #1
 80001ce:	6013      	str	r3, [r2, #0]

	AFIO_EXTICR1 &= ~(0x11);
 80001d0:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <main+0x48>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a07      	ldr	r2, [pc, #28]	; (80001f4 <main+0x48>)
 80001d6:	f023 0311 	bic.w	r3, r3, #17
 80001da:	6013      	str	r3, [r2, #0]

	NVIC_EXTIE0 |= (1<<6);
 80001dc:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <main+0x4c>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a05      	ldr	r2, [pc, #20]	; (80001f8 <main+0x4c>)
 80001e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001e6:	6013      	str	r3, [r2, #0]
	while(1);
 80001e8:	e7fe      	b.n	80001e8 <main+0x3c>
 80001ea:	bf00      	nop
 80001ec:	40010400 	.word	0x40010400
 80001f0:	40010408 	.word	0x40010408
 80001f4:	40010008 	.word	0x40010008
 80001f8:	e000e100 	.word	0xe000e100

080001fc <EXTI0_IRQHandler>:

}

void EXTI0_IRQHandler(){
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0

	GPIOA_ODR ^= (1<<13);
 8000200:	4b07      	ldr	r3, [pc, #28]	; (8000220 <EXTI0_IRQHandler+0x24>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a06      	ldr	r2, [pc, #24]	; (8000220 <EXTI0_IRQHandler+0x24>)
 8000206:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800020a:	6013      	str	r3, [r2, #0]
	//clear pending register by write 1
	EXTI_PR	|= (1<<0);
 800020c:	4b05      	ldr	r3, [pc, #20]	; (8000224 <EXTI0_IRQHandler+0x28>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a04      	ldr	r2, [pc, #16]	; (8000224 <EXTI0_IRQHandler+0x28>)
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	6013      	str	r3, [r2, #0]
}
 8000218:	bf00      	nop
 800021a:	46bd      	mov	sp, r7
 800021c:	bc80      	pop	{r7}
 800021e:	4770      	bx	lr
 8000220:	4001080c 	.word	0x4001080c
 8000224:	40010414 	.word	0x40010414

08000228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr

08000234 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000238:	e7fe      	b.n	8000238 <HardFault_Handler+0x4>

0800023a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800023a:	b480      	push	{r7}
 800023c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800023e:	e7fe      	b.n	800023e <MemManage_Handler+0x4>

08000240 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000244:	e7fe      	b.n	8000244 <BusFault_Handler+0x4>

08000246 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000246:	b480      	push	{r7}
 8000248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800024a:	e7fe      	b.n	800024a <UsageFault_Handler+0x4>

0800024c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000250:	bf00      	nop
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr

08000258 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr

08000264 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	bc80      	pop	{r7}
 800026e:	4770      	bx	lr

08000270 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000274:	f000 f82e 	bl	80002d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}

0800027c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000280:	bf00      	nop
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr

08000288 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000288:	480c      	ldr	r0, [pc, #48]	; (80002bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800028a:	490d      	ldr	r1, [pc, #52]	; (80002c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800028c:	4a0d      	ldr	r2, [pc, #52]	; (80002c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800028e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000290:	e002      	b.n	8000298 <LoopCopyDataInit>

08000292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000296:	3304      	adds	r3, #4

08000298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800029a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800029c:	d3f9      	bcc.n	8000292 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800029e:	4a0a      	ldr	r2, [pc, #40]	; (80002c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80002a0:	4c0a      	ldr	r4, [pc, #40]	; (80002cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80002a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a4:	e001      	b.n	80002aa <LoopFillZerobss>

080002a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a8:	3204      	adds	r2, #4

080002aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002ac:	d3fb      	bcc.n	80002a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80002ae:	f7ff ffe5 	bl	800027c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002b2:	f000 f821 	bl	80002f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002b6:	f7ff ff79 	bl	80001ac <main>
  bx lr
 80002ba:	4770      	bx	lr
  ldr r0, =_sdata
 80002bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80002c4:	08000360 	.word	0x08000360
  ldr r2, =_sbss
 80002c8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80002cc:	20000024 	.word	0x20000024

080002d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d0:	e7fe      	b.n	80002d0 <ADC1_2_IRQHandler>
	...

080002d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002d8:	4b05      	ldr	r3, [pc, #20]	; (80002f0 <HAL_IncTick+0x1c>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	461a      	mov	r2, r3
 80002de:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <HAL_IncTick+0x20>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	4413      	add	r3, r2
 80002e4:	4a03      	ldr	r2, [pc, #12]	; (80002f4 <HAL_IncTick+0x20>)
 80002e6:	6013      	str	r3, [r2, #0]
}
 80002e8:	bf00      	nop
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr
 80002f0:	20000000 	.word	0x20000000
 80002f4:	20000020 	.word	0x20000020

080002f8 <__libc_init_array>:
 80002f8:	b570      	push	{r4, r5, r6, lr}
 80002fa:	2500      	movs	r5, #0
 80002fc:	4e0c      	ldr	r6, [pc, #48]	; (8000330 <__libc_init_array+0x38>)
 80002fe:	4c0d      	ldr	r4, [pc, #52]	; (8000334 <__libc_init_array+0x3c>)
 8000300:	1ba4      	subs	r4, r4, r6
 8000302:	10a4      	asrs	r4, r4, #2
 8000304:	42a5      	cmp	r5, r4
 8000306:	d109      	bne.n	800031c <__libc_init_array+0x24>
 8000308:	f000 f81a 	bl	8000340 <_init>
 800030c:	2500      	movs	r5, #0
 800030e:	4e0a      	ldr	r6, [pc, #40]	; (8000338 <__libc_init_array+0x40>)
 8000310:	4c0a      	ldr	r4, [pc, #40]	; (800033c <__libc_init_array+0x44>)
 8000312:	1ba4      	subs	r4, r4, r6
 8000314:	10a4      	asrs	r4, r4, #2
 8000316:	42a5      	cmp	r5, r4
 8000318:	d105      	bne.n	8000326 <__libc_init_array+0x2e>
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000320:	4798      	blx	r3
 8000322:	3501      	adds	r5, #1
 8000324:	e7ee      	b.n	8000304 <__libc_init_array+0xc>
 8000326:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800032a:	4798      	blx	r3
 800032c:	3501      	adds	r5, #1
 800032e:	e7f2      	b.n	8000316 <__libc_init_array+0x1e>
 8000330:	08000358 	.word	0x08000358
 8000334:	08000358 	.word	0x08000358
 8000338:	08000358 	.word	0x08000358
 800033c:	0800035c 	.word	0x0800035c

08000340 <_init>:
 8000340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000342:	bf00      	nop
 8000344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000346:	bc08      	pop	{r3}
 8000348:	469e      	mov	lr, r3
 800034a:	4770      	bx	lr

0800034c <_fini>:
 800034c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034e:	bf00      	nop
 8000350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000352:	bc08      	pop	{r3}
 8000354:	469e      	mov	lr, r3
 8000356:	4770      	bx	lr
